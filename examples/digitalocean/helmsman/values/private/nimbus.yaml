replicas: 9
podManagementPolicy: Parallel

extraArgs:
  - --network=/data/testnet_spec/
  - --bootstrap-file=/data/testnet_spec/bootstrap_nodes.txt
  - --web3-url=http://geth.ethereum-private.svc.cluster.local:8545
  - --max-peers=30
  - --validators-dir=/data/validator/keys/
  - --secrets-dir=/data/validator/secrets/
initContainers:
- name: init-genesis
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      mkdir -p /data/testnet_spec;
      if ! [ -f /data/testnet_spec/genesis.ssz ];
      then
        echo "waiting for genesis provider";
        while ! wget -T 5 -c http://genesis-cl:8000/; do sleep 10; done;
        wget -O /data/testnet_spec/deposit_contract.txt http://genesis-cl:8000/deposit_contract.txt;
        wget -O /data/testnet_spec/deploy_block.txt http://genesis-cl:8000/deploy_block.txt;
        wget -O /data/testnet_spec/config.yaml http://genesis-cl:8000/config.yaml;
        wget -O /data/testnet_spec/genesis.ssz http://genesis-cl:8000/genesis.ssz;
        echo "genesis init done";
      else
        echo "genesis exists. skipping...";
      fi;
      echo "waiting for bootnode to be available";
      while ! wget -O /data/testnet_spec/bootstrap_nodes.txt http://lighthouse-bootnode-0.lighthouse-bootnode-headless.ethereum-private.svc.cluster.local:8888/enr;
      do
        sleep 10;
      done;
      echo "bootnode init done: $(cat data/testnet_spec/bootstrap_nodes.txt)";
  volumeMounts:
    - name: storage
      mountPath: "/data"
- name: init-keys
  image: skylenet/ethereum-genesis-cl:latest@sha256:de1304dd34366bfb825713f9cacb66bf83c7a08914612984e29faac0a8376ba8
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - bash
    - -ace
    - >
      if [ -n "$(ls -A /data/validator/keys 2>/dev/null)" ];
      then
        echo "keys already exist. skipping...";
        exit 0;
      fi;
      INDEX=$(echo $(hostname)| rev | cut -d'-' -f 1 | rev);
      RANGE="NODE_${INDEX}_KEY_RANGE";
      S_MIN=$(echo ${!RANGE} | cut -d ':' -f1 );
      S_MAX=$(echo ${!RANGE} | cut -d ':' -f2 );
      mkdir -p /data/validator/keys /data/validator/secrets;
      echo "generating keys for node $INDEX. range $S_MIN to $S_MAX";
      eth2-val-tools keystores --source-mnemonic="$MNEMONIC" --source-min=$S_MIN --source-max=$S_MAX --prysm-pass Pass123word --insecure --out-loc assigned_data;
      mv assigned_data/nimbus-keys/* /data/validator/keys/;
      mv assigned_data/secrets/* /data/validator/secrets/;
      chmod -R 0600 /data/validator/keys/*/keystore.json /data/validator/secrets/*;
      echo "finished generating and importing keys";
  volumeMounts:
    - name: storage
      mountPath: "/data"
  env:
    - name: MNEMONIC
      value: "giant issue aisle success illegal bike spike question tent bar rely arctic volcano long crawl hungry vocal artwork sniff fantasy very lucky have athlete"
    - name: NODE_0_KEY_RANGE
      value: "60000:64000"
    - name: NODE_1_KEY_RANGE
      value: "64000:68000"
    - name: NODE_2_KEY_RANGE
      value: "68000:72000"
    - name: NODE_3_KEY_RANGE
      value: "72000:76000"
    - name: NODE_4_KEY_RANGE
      value: "76000:80000"
    - name: NODE_5_KEY_RANGE
      value: "80000:84000"
    - name: NODE_6_KEY_RANGE
      value: "84000:88000"
    - name: NODE_7_KEY_RANGE
      value: "88000:92000"
    - name: NODE_8_KEY_RANGE
      value: "92000:96000"

#persistence:
#  enabled: true
#  size: 2Gi

resources: {}
