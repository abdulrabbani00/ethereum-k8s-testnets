replicas: 6

podManagementPolicy: Parallel

mode: validator

extraArgs:
  - --testnet-dir=/data/testnet_spec
  - "--beacon-nodes=\"\
    http://lighthouse-beacon-$(echo $(hostname)| rev | cut -d'-' -f 1 | rev).lighthouse-beacon-headless.ethereum-private.svc.cluster.local:5052\
    \""
  - --secrets-dir=/data/validator/secrets
  - --validators-dir=/data/validator/keys
  - --graffiti=$(hostname | cut -c -32)
  - --init-slashing-protection

livenessProbe:
  tcpSocket: null
  httpGet:
    path: /metrics
    port: 5054

readinessProbe:
  tcpSocket: null
  httpGet:
    path: /metrics
    port: 5054

serviceMonitor:
  enabled: true

initContainers:
- name: init-keys
  image: skylenet/ethereum-genesis-cl:latest@sha256:de1304dd34366bfb825713f9cacb66bf83c7a08914612984e29faac0a8376ba8
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - bash
    - -ace
    - >
      if [ -n "$(ls -A /data/validator/keys 2>/dev/null)" ];
      then
        echo "keys already exist. skipping...";
        exit 0;
      fi;
      export INDEX=$(echo $(hostname)| rev | cut -d'-' -f 1 | rev);
      export S_MIN=$(( (INDEX+SKIP_INDEX)   * COUNT ));
      export S_MAX=$(( (INDEX+SKIP_INDEX+1) * COUNT ));
      mkdir -p /data/validator/keys;
      mkdir -p /data/validator/secrets;
      echo "generating keys for node $INDEX. range $S_MIN to $S_MAX";
      eth2-val-tools keystores --source-mnemonic="$MNEMONIC" --source-min=$S_MIN --source-max=$S_MAX --prysm-pass Pass123word --insecure --out-loc assigned_data;
      mv assigned_data/keys/* /data/validator/keys/;
      mv assigned_data/secrets/* /data/validator/secrets/;
      echo "finished generating and importing keys";
  volumeMounts:
    - name: storage
      mountPath: "/data"
  env:
    - name: COUNT
      value: "4000"
    - name: SKIP_INDEX
      value: "0"
    - name: MNEMONIC
      value: "giant issue aisle success illegal bike spike question tent bar rely arctic volcano long crawl hungry vocal artwork sniff fantasy very lucky have athlete"

- name: init-genesis
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      mkdir -p /data/testnet_spec;
      if ! [ -f /data/testnet_spec/genesis.ssz ];
      then
        echo "waiting for genesis provider";
        while ! wget -T 5 -c http://genesis-cl:8000/; do sleep 10; done;
        wget -O /data/testnet_spec/deposit_contract.txt http://genesis-cl:8000/deposit_contract.txt;
        wget -O /data/testnet_spec/deploy_block.txt http://genesis-cl:8000/deploy_block.txt;
        wget -O /data/testnet_spec/config.yaml http://genesis-cl:8000/config.yaml;
        wget -O /data/testnet_spec/genesis.ssz http://genesis-cl:8000/genesis.ssz;
        echo "genesis init done";
      else
        echo "genesis exists. skipping...";
      fi;
      while ! wget -O /data/testnet_spec/bootstrap_nodes.txt http://lighthouse-bootnode-0.lighthouse-bootnode-headless.ethereum-private.svc.cluster.local:8888/enr;
      do
        sleep 10;
      done;
      echo "bootnode init done: $(cat data/testnet_spec/bootstrap_nodes.txt)";
  volumeMounts:
    - name: storage
      mountPath: "/data"

- name: init-beacon-wait
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      HEALTH_API="http://lighthouse-beacon-$(echo $(hostname)| rev | cut -d'-' -f 1 | rev).lighthouse-beacon-headless.ethereum-private.svc.cluster.local:5052/eth/v1/node/health";
      echo "waiting for beacon node to be available on $HEALTH_API";
      while ! wget $HEALTH_API; do sleep 10; done;
      echo "beacon node is available"

#persistence:
#  enabled: true
#  accessModes:
#  - ReadWriteOnce
#  size: 1Gi
#  storageClassName: do-block-storage

serviceMonitor:
  enabled: true
